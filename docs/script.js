/**
 * CS2 Players Monitor - GitHub Pages Version
 * JavaScript –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 */

class CS2Monitor {
    constructor() {
        this.autoRefreshInterval = null;
        this.refreshCount = 0;
        this.lastUpdateTime = null;
        
        this.initElements();
        this.bindEvents();
        this.loadSettings();
        this.updateApiLink();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        this.refreshData();
    }

    initElements() {
        // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
        this.serverIpInput = document.getElementById('serverIp');
        this.serverPortInput = document.getElementById('serverPort');
        this.apiUrlInput = document.getElementById('apiUrl');
        
        // –ö–Ω–æ–ø–∫–∏
        this.refreshBtn = document.getElementById('refreshBtn');
        this.forceRefreshBtn = document.getElementById('forceRefreshBtn');
        this.autoRefreshBtn = document.getElementById('autoRefreshBtn');
        
        // –°—Ç–∞—Ç—É—Å
        this.connectionStatus = document.getElementById('connectionStatus');
        this.lastUpdateTimeElement = document.getElementById('lastUpdateTime');
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        this.serverName = document.getElementById('serverName');
        this.serverMap = document.getElementById('serverMap');
        this.serverPlayers = document.getElementById('serverPlayers');
        this.serverGame = document.getElementById('serverGame');
        this.serverVac = document.getElementById('serverVac');
        this.serverVersion = document.getElementById('serverVersion');
        
        // –ò–≥—Ä–æ–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.playersContainer = document.getElementById('playersContainer');
        this.totalPlayersElement = document.getElementById('totalPlayers');
        this.topScoreElement = document.getElementById('topScore');
        this.avgTimeElement = document.getElementById('avgTime');
        this.refreshCountElement = document.getElementById('refreshCount');
        
        // –ü–æ–¥–≤–∞–ª
        this.apiLinkFooter = document.getElementById('apiLinkFooter');
    }

    bindEvents() {
        this.refreshBtn.addEventListener('click', () => this.refreshData(false));
        this.forceRefreshBtn.addEventListener('click', () => this.refreshData(true));
        this.autoRefreshBtn.addEventListener('click', () => this.toggleAutoRefresh());
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.serverIpInput.addEventListener('change', () => this.saveSettings());
        this.serverPortInput.addEventListener('change', () => this.saveSettings());
        this.apiUrlInput.addEventListener('change', () => {
            this.saveSettings();
            this.updateApiLink();
        });
    }

    loadSettings() {
        const settings = localStorage.getItem('cs2-monitor-settings');
        if (settings) {
            const parsed = JSON.parse(settings);
            this.serverIpInput.value = parsed.serverIp || '46.174.49.96';
            this.serverPortInput.value = parsed.serverPort || '27015';
            this.apiUrlInput.value = parsed.apiUrl || 'https://cs2-gghub-monitor.vercel.app';
        }
    }

    saveSettings() {
        const settings = {
            serverIp: this.serverIpInput.value,
            serverPort: this.serverPortInput.value,
            apiUrl: this.apiUrlInput.value
        };
        localStorage.setItem('cs2-monitor-settings', JSON.stringify(settings));
    }

    updateApiLink() {
        const apiUrl = this.apiUrlInput.value;
        this.apiLinkFooter.href = `${apiUrl}/api/health`;
        this.apiLinkFooter.textContent = 'API Health';
    }

    setStatus(type, message) {
        const statusIcon = this.connectionStatus.querySelector('.status-icon');
        const statusText = this.connectionStatus.querySelector('.status-text');
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–∞
        this.connectionStatus.className = 'status ' + type;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç
        switch (type) {
            case 'loading':
                statusIcon.textContent = '‚è≥';
                break;
            case 'connected':
                statusIcon.textContent = '‚úÖ';
                break;
            case 'error':
                statusIcon.textContent = '‚ùå';
                break;
            default:
                statusIcon.textContent = '‚è≥';
        }
        
        statusText.textContent = message;
    }

    async refreshData(forceRefresh = false) {
        const apiUrl = this.apiUrlInput.value;
        const serverIp = this.serverIpInput.value;
        const serverPort = this.serverPortInput.value;
        
        if (!apiUrl || !serverIp || !serverPort) {
            this.setStatus('error', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }

        this.setStatus('loading', '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
        this.refreshBtn.disabled = true;
        this.forceRefreshBtn.disabled = true;

        try {
            const params = new URLSearchParams({
                server_ip: serverIp,
                server_port: serverPort
            });

            if (forceRefresh) {
                params.append('force_refresh', 'true');
            }

            const response = await fetch(`${apiUrl}/api/players?${params}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                },
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
                signal: AbortSignal.timeout(30000)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            if (data.success) {
                this.updateServerInfo(data.server_info);
                this.updatePlayersList(data.players);
                this.updateStats(data.players);
                this.setStatus('connected', `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ (${data.cached ? '–∫—ç—à' : '–æ–±–Ω–æ–≤–ª–µ–Ω–æ'})`);
                
                this.lastUpdateTime = new Date();
                this.updateLastUpdateTime();
                this.refreshCount++;
                this.refreshCountElement.textContent = this.refreshCount;
            } else {
                throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.setStatus('error', `–û—à–∏–±–∫–∞: ${error.message}`);
            this.showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`);
        } finally {
            this.refreshBtn.disabled = false;
            this.forceRefreshBtn.disabled = false;
        }
    }

    updateServerInfo(serverInfo) {
        if (!serverInfo) return;

        this.serverName.textContent = serverInfo.name || '-';
        this.serverMap.textContent = serverInfo.map || '-';
        this.serverPlayers.textContent = serverInfo.players || '-';
        this.serverGame.textContent = serverInfo.game || '-';
        this.serverVac.textContent = serverInfo.vac_enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω';
        this.serverVersion.textContent = serverInfo.version || '-';
    }

    updatePlayersList(players) {
        if (!players || players.length === 0) {
            this.playersContainer.innerHTML = `
                <div class="no-players">
                    üë• –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
                </div>
            `;
            return;
        }

        const playersGrid = document.createElement('div');
        playersGrid.className = 'players-grid';

        players.forEach((player, index) => {
            const playerCard = document.createElement('div');
            playerCard.className = 'player-card';
            
            playerCard.innerHTML = `
                <div class="player-name">
                    ${this.escapeHtml(player.name)} 
                    ${index === 0 ? 'üëë' : ''}
                </div>
                <div class="player-stats">
                    <div class="player-stat">
                        <span class="stat-label">–°—á—ë—Ç:</span>
                        <span class="stat-value">${player.score}</span>
                    </div>
                    <div class="player-stat">
                        <span class="stat-label">–í—Ä–µ–º—è:</span>
                        <span class="stat-value">${player.duration_formatted}</span>
                    </div>
                    <div class="player-stat">
                        <span class="stat-label">–ü–∏–Ω–≥:</span>
                        <span class="stat-value">${player.ping !== 'N/A' ? player.ping + 'ms' : 'N/A'}</span>
                    </div>
                    <div class="player-stat">
                        <span class="stat-label">–ü–æ–¥–∫–ª—é—á–µ–Ω:</span>
                        <span class="stat-value">${player.time_connected}</span>
                    </div>
                </div>
            `;

            playersGrid.appendChild(playerCard);
        });

        this.playersContainer.innerHTML = '';
        this.playersContainer.appendChild(playersGrid);
    }

    updateStats(players) {
        const totalPlayers = players.length;
        const topScore = players.length > 0 ? Math.max(...players.map(p => p.score)) : 0;
        const avgTime = players.length > 0 
            ? players.reduce((sum, p) => sum + p.duration, 0) / players.length 
            : 0;

        this.totalPlayersElement.textContent = totalPlayers;
        this.topScoreElement.textContent = topScore;
        this.avgTimeElement.textContent = this.formatDuration(avgTime);
    }

    formatDuration(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        
        if (hours > 0) {
            return `${hours}—á ${minutes}–º`;
        } else if (minutes > 0) {
            return `${minutes}–º`;
        } else {
            return `${Math.floor(seconds)}—Å`;
        }
    }

    updateLastUpdateTime() {
        if (this.lastUpdateTime) {
            const timeStr = this.lastUpdateTime.toLocaleTimeString('ru-RU');
            this.lastUpdateTimeElement.textContent = `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${timeStr}`;
        }
    }

    toggleAutoRefresh() {
        const isActive = this.autoRefreshBtn.getAttribute('data-active') === 'true';
        
        if (isActive) {
            // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            clearInterval(this.autoRefreshInterval);
            this.autoRefreshInterval = null;
            this.autoRefreshBtn.setAttribute('data-active', 'false');
            this.autoRefreshBtn.innerHTML = 'üì° –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ';
        } else {
            // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            this.autoRefreshInterval = setInterval(() => {
                this.refreshData(false);
            }, 30000);
            this.autoRefreshBtn.setAttribute('data-active', 'true');
            this.autoRefreshBtn.innerHTML = 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
            
            // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.refreshData(false);
        }
    }

    showError(message) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        const existingError = this.playersContainer.querySelector('.error-message');
        if (existingError) {
            existingError.remove();
        }

        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.innerHTML = `
            <strong>–û—à–∏–±–∫–∞:</strong> ${this.escapeHtml(message)}
            <br><small>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</small>
        `;
        
        this.playersContainer.prepend(errorDiv);
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    window.cs2Monitor = new CS2Monitor();
    
    console.log('üéÆ CS2 Players Monitor –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('üì° GitHub Pages –≤–µ—Ä—Å–∏—è');
    console.log('üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/kidoweb/cs2-players-monitor');
}); 